declare i32 @getint()
declare i32 @getchar()
declare void @putint(i32)
declare void @putch(i32)
declare void @putstr(i8*)

@.str.0 = private unnamed_addr constant [5 x i8] c"j : \00", align 1
@.str.1 = private unnamed_addr constant [7 x i8] c", k : \00", align 1
@.str.2 = private unnamed_addr constant [7 x i8] c", l : \00", align 1
@.str.3 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1

define dso_local void @fun1() {
0:
	%1 = alloca i32
	%2 = alloca i32
	store i32 4, i32* %2
	%3 = alloca i32
	store i32 6, i32* %3
	%4 = load i32, i32* %2
	store i32 %4, i32* %3
	store i32 3, i32* %1
	%5 = load i32, i32* %1
	%6 = srem i32 %5, 20
	%7 = sub i32 %6, 1
	%8 = add i32 %7, 9
	store i32 %8, i32* %1
	%9 = alloca i32
	store i32 0, i32* %9
	br label %10
10:
	%11 = load i32, i32* %9
	%12 = icmp sle i32 %11, 7
	%13 = zext i1 %12 to i32
	%14 = icmp ne i32 %13, 0
	br i1 %14, label %15, label %30
15:
	%16 = load i32, i32* %9
	%17 = add i32 %16, 1
	store i32 %17, i32* %9
	%18 = load i32, i32* %1
	%19 = load i32, i32* %9
	%20 = icmp eq i32 %18, %19
	br i1 %20, label %21, label %26
21:
	%22 = load i32, i32* %2
	%23 = load i32, i32* %1
	%24 = add i32 %22, %23
	store i32 %24, i32* %2
	br label %29
25:
	br label %26
26:
	%27 = load i32, i32* %1
	%28 = sub i32 %27, 1
	store i32 %28, i32* %1
	br label %29
29:
	br label %10
30:
	call void @putstr(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.0, i64 0, i64 0))
	%31 = load i32, i32* %1
	call void @putint(i32 %31)
	call void @putstr(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.1, i64 0, i64 0))
	%32 = load i32, i32* %2
	call void @putint(i32 %32)
	call void @putstr(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.2, i64 0, i64 0))
	%33 = load i32, i32* %3
	call void @putint(i32 %33)
	call void @putstr(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.3, i64 0, i64 0))
	ret void
}

@.str.4 = private unnamed_addr constant [6 x i8] c"a! = \00", align 1
@.str.5 = private unnamed_addr constant [9 x i8] c", num = \00", align 1
@.str.6 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1

define dso_local i32 @fun2(i32 %0) {
1:
	%2 = alloca i32
	store i32 %0, i32* %2
	%3 = alloca i32
	store i32 1, i32* %3
	%4 = alloca i32
	store i32 1, i32* %4
	br label %5
5:
	%6 = load i32, i32* %2
	%7 = icmp sge i32 %6, 1
	%8 = zext i1 %7 to i32
	%9 = icmp ne i32 %8, 0
	br i1 %9, label %10, label %29
10:
	%11 = load i32, i32* %3
	%12 = load i32, i32* %2
	%13 = mul i32 %11, %12
	store i32 %13, i32* %3
	%14 = load i32, i32* %2
	%15 = sub i32 %14, 1
	store i32 %15, i32* %2
	%16 = load i32, i32* %2
	%17 = icmp eq i32 %16, 1
	br i1 %17, label %18, label %20
18:
	br label %29
19:
	br label %27
20:
	%21 = load i32, i32* %2
	%22 = icmp ne i32 %21, 1
	br i1 %22, label %23, label %26
23:
	%24 = load i32, i32* %4
	%25 = add i32 %24, 1
	store i32 %25, i32* %4
	br label %26
26:
	br label %27
27:
	br label %28
28:
	br label %5
29:
	call void @putstr(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.4, i64 0, i64 0))
	%30 = load i32, i32* %3
	call void @putint(i32 %30)
	call void @putstr(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.5, i64 0, i64 0))
	%31 = load i32, i32* %4
	call void @putint(i32 %31)
	call void @putstr(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.6, i64 0, i64 0))
	ret i32 1
}


define dso_local i32 @fun3(i32 %0, i32 %1) {
2:
	%3 = alloca i32
	store i32 %0, i32* %3
	%4 = alloca i32
	store i32 %1, i32* %4
	%5 = load i32, i32* %3
	%6 = load i32, i32* %4
	%7 = icmp sgt i32 %5, %6
	%8 = zext i1 %7 to i32
	%9 = icmp ne i32 %8, 0
	br i1 %9, label %10, label %13
10:
	%11 = load i32, i32* %3
	ret i32 %11
12:
	br label %23
13:
	%14 = load i32, i32* %3
	%15 = load i32, i32* %4
	%16 = icmp slt i32 %14, %15
	%17 = zext i1 %16 to i32
	%18 = icmp ne i32 %17, 0
	br i1 %18, label %19, label %22
19:
	%20 = load i32, i32* %4
	ret i32 %20
21:
	br label %22
22:
	br label %23
23:
	%24 = load i32, i32* %3
	ret i32 %24
}


define dso_local i32 @gcd(i32 %0, i32 %1) {
2:
	%3 = alloca i32
	store i32 %0, i32* %3
	%4 = alloca i32
	store i32 %1, i32* %4
	%5 = load i32, i32* %3
	%6 = load i32, i32* %4
	%7 = srem i32 %5, %6
	%8 = icmp eq i32 %7, 0
	br i1 %8, label %9, label %12
9:
	%10 = load i32, i32* %4
	ret i32 %10
11:
	br label %12
12:
	%13 = load i32, i32* %4
	%14 = load i32, i32* %3
	%15 = load i32, i32* %4
	%16 = srem i32 %14, %15
	%17 = call i32 @gcd(i32 %13, i32 %16)
	ret i32 %17
}


define dso_local i32 @lcm(i32 %0, i32 %1) {
2:
	%3 = alloca i32
	store i32 %0, i32* %3
	%4 = alloca i32
	store i32 %1, i32* %4
	%5 = alloca i32
	%6 = load i32, i32* %3
	%7 = load i32, i32* %4
	%8 = call i32 @gcd(i32 %6, i32 %7)
	store i32 %8, i32* %5
	%9 = load i32, i32* %3
	%10 = load i32, i32* %4
	%11 = mul i32 %9, %10
	%12 = load i32, i32* %5
	%13 = sdiv i32 %11, %12
	ret i32 %13
}

@.str.7 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1

define dso_local void @fun4(i32 %0, i32 %1, i32 %2) {
3:
	%4 = alloca i32
	store i32 %0, i32* %4
	%5 = alloca i32
	store i32 %1, i32* %5
	%6 = alloca i32
	store i32 %2, i32* %6
	%7 = alloca i32
	%8 = load i32, i32* %4
	%9 = load i32, i32* %5
	%10 = add i32 %8, %9
	%11 = load i32, i32* %6
	%12 = sub i32 %10, %11
	%13 = load i32, i32* %4
	%14 = mul i32 %12, %13
	store i32 %14, i32* %7
	%15 = load i32, i32* %7
	call void @putint(i32 %15)
	call void @putstr(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.7, i64 0, i64 0))
	ret void
}


define dso_local i32 @fun5(i32 %0) {
1:
	%2 = alloca i32
	store i32 %0, i32* %2
	%3 = load i32, i32* %2
	%4 = icmp eq i32 %3, 1
	br i1 %4, label %5, label %7
5:
	ret i32 1
6:
	br label %13
7:
	%8 = load i32, i32* %2
	%9 = icmp eq i32 %8, 2
	br i1 %9, label %10, label %12
10:
	ret i32 1
11:
	br label %12
12:
	br label %13
13:
	%14 = load i32, i32* %2
	%15 = sub i32 %14, 1
	%16 = call i32 @fun5(i32 %15)
	%17 = load i32, i32* %2
	%18 = sub i32 %17, 2
	%19 = call i32 @fun5(i32 %18)
	%20 = add i32 %16, %19
	ret i32 %20
}

@.str.8 = private unnamed_addr constant [15 x i8] c"test---------\0A\00", align 1
@.str.9 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@.str.10 = private unnamed_addr constant [31 x i8] c"scanf a, b to get gcd and lcm\0A\00", align 1
@.str.11 = private unnamed_addr constant [8 x i8] c"gcd is \00", align 1
@.str.12 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@.str.13 = private unnamed_addr constant [8 x i8] c"lcm is \00", align 1
@.str.14 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@.str.15 = private unnamed_addr constant [26 x i8] c"scanf a to get Fibonacci\0A\00", align 1
@.str.16 = private unnamed_addr constant [8 x i8] c"fib is \00", align 1
@.str.17 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1

define dso_local i32 @main() {
0:
	call void @fun1()
	%1 = call i32 @fun2(i32 6)
	call void @putstr(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.8, i64 0, i64 0))
	%2 = call i32 @fun3(i32 3, i32 6)
	%3 = call i32 @fun3(i32 2, i32 %2)
	call void @putint(i32 %3)
	call void @putstr(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.9, i64 0, i64 0))
	%4 = alloca i32
	%5 = alloca i32
	call void @putstr(i8* getelementptr inbounds ([31 x i8], [31 x i8]* @.str.10, i64 0, i64 0))
	%6 = call i32 @getint()
	store i32 %6, i32* %4
	%7 = call i32 @getint()
	store i32 %7, i32* %5
	call void @putstr(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.11, i64 0, i64 0))
	%8 = load i32, i32* %4
	%9 = load i32, i32* %5
	%10 = call i32 @gcd(i32 %8, i32 %9)
	call void @putint(i32 %10)
	call void @putstr(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.12, i64 0, i64 0))
	call void @putstr(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.13, i64 0, i64 0))
	%11 = load i32, i32* %4
	%12 = load i32, i32* %5
	%13 = call i32 @lcm(i32 %11, i32 %12)
	call void @putint(i32 %13)
	call void @putstr(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.14, i64 0, i64 0))
	%14 = alloca i32
	%15 = call i32 @getint()
	store i32 %15, i32* %14
	%16 = load i32, i32* %14
	call void @fun4(i32 %16, i32 3, i32 10)
	call void @putstr(i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.15, i64 0, i64 0))
	%17 = alloca i32
	%18 = call i32 @getint()
	store i32 %18, i32* %17
	call void @putstr(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.16, i64 0, i64 0))
	%19 = load i32, i32* %17
	%20 = call i32 @fun5(i32 %19)
	call void @putint(i32 %20)
	call void @putstr(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.17, i64 0, i64 0))
	ret i32 0
}

