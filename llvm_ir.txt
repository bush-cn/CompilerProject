declare i32 @getint()
declare i32 @getchar()
declare void @putint(i32)
declare void @putch(i32)
declare void @putstr(i8*)

@.str.0 = private unnamed_addr constant [4 x i8] c"a0=\00", align 1
@.str.1 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@.str.2 = private unnamed_addr constant [4 x i8] c"a1=\00", align 1
@.str.3 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@.str.4 = private unnamed_addr constant [4 x i8] c"a2=\00", align 1
@.str.5 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@.str.6 = private unnamed_addr constant [4 x i8] c"a3=\00", align 1
@.str.7 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@.str.8 = private unnamed_addr constant [4 x i8] c"a4=\00", align 1
@.str.9 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@.str.10 = private unnamed_addr constant [4 x i8] c"a5=\00", align 1
@.str.11 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@.str.12 = private unnamed_addr constant [4 x i8] c"a6=\00", align 1
@.str.13 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@.str.14 = private unnamed_addr constant [4 x i8] c"a7=\00", align 1
@.str.15 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@.str.16 = private unnamed_addr constant [4 x i8] c"a8=\00", align 1
@.str.17 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@.str.18 = private unnamed_addr constant [4 x i8] c"a9=\00", align 1
@.str.19 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@.str.20 = private unnamed_addr constant [5 x i8] c"a10=\00", align 1
@.str.21 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@.str.22 = private unnamed_addr constant [5 x i8] c"a11=\00", align 1
@.str.23 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@.str.24 = private unnamed_addr constant [5 x i8] c"a12=\00", align 1
@.str.25 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@.str.26 = private unnamed_addr constant [5 x i8] c"a13=\00", align 1
@.str.27 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@.str.28 = private unnamed_addr constant [5 x i8] c"a14=\00", align 1
@.str.29 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1

define dso_local i32 @sum(i32 %0, i32 %1, i32 %2, i32 %3, i32 %4, i32 %5, i32 %6, i32 %7, i32 %8, i32 %9, i32 %10, i32 %11, i32 %12, i32 %13, i32 %14) {
15:								 ; preds =
	%16 = alloca i32				;alloc addr for fParam a0
	store i32 %0, i32* %16			;store fParam slot
	%17 = alloca i32				;alloc addr for fParam a1
	store i32 %1, i32* %17			;store fParam slot
	%18 = alloca i32				;alloc addr for fParam a2
	store i32 %2, i32* %18			;store fParam slot
	%19 = alloca i32				;alloc addr for fParam a3
	store i32 %3, i32* %19			;store fParam slot
	%20 = alloca i32				;alloc addr for fParam a4
	store i32 %4, i32* %20			;store fParam slot
	%21 = alloca i32				;alloc addr for fParam a5
	store i32 %5, i32* %21			;store fParam slot
	%22 = alloca i32				;alloc addr for fParam a6
	store i32 %6, i32* %22			;store fParam slot
	%23 = alloca i32				;alloc addr for fParam a7
	store i32 %7, i32* %23			;store fParam slot
	%24 = alloca i32				;alloc addr for fParam a8
	store i32 %8, i32* %24			;store fParam slot
	%25 = alloca i32				;alloc addr for fParam a9
	store i32 %9, i32* %25			;store fParam slot
	%26 = alloca i32				;alloc addr for fParam a10
	store i32 %10, i32* %26			;store fParam slot
	%27 = alloca i32				;alloc addr for fParam a11
	store i32 %11, i32* %27			;store fParam slot
	%28 = alloca i32				;alloc addr for fParam a12
	store i32 %12, i32* %28			;store fParam slot
	%29 = alloca i32				;alloc addr for fParam a13
	store i32 %13, i32* %29			;store fParam slot
	%30 = alloca i32				;alloc addr for fParam a14
	store i32 %14, i32* %30			;store fParam slot
	call void @putstr(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.0, i64 0, i64 0))
	%31 = load i32, i32* %16		;load value of a0
	call void @putint(i32 %31)
	call void @putstr(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0))
	call void @putstr(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.2, i64 0, i64 0))
	%32 = load i32, i32* %17		;load value of a1
	call void @putint(i32 %32)
	call void @putstr(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.3, i64 0, i64 0))
	call void @putstr(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.4, i64 0, i64 0))
	%33 = load i32, i32* %18		;load value of a2
	call void @putint(i32 %33)
	call void @putstr(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.5, i64 0, i64 0))
	call void @putstr(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.6, i64 0, i64 0))
	%34 = load i32, i32* %19		;load value of a3
	call void @putint(i32 %34)
	call void @putstr(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.7, i64 0, i64 0))
	call void @putstr(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.8, i64 0, i64 0))
	%35 = load i32, i32* %20		;load value of a4
	call void @putint(i32 %35)
	call void @putstr(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.9, i64 0, i64 0))
	call void @putstr(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.10, i64 0, i64 0))
	%36 = load i32, i32* %21		;load value of a5
	call void @putint(i32 %36)
	call void @putstr(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.11, i64 0, i64 0))
	call void @putstr(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.12, i64 0, i64 0))
	%37 = load i32, i32* %22		;load value of a6
	call void @putint(i32 %37)
	call void @putstr(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.13, i64 0, i64 0))
	call void @putstr(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.14, i64 0, i64 0))
	%38 = load i32, i32* %23		;load value of a7
	call void @putint(i32 %38)
	call void @putstr(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.15, i64 0, i64 0))
	call void @putstr(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.16, i64 0, i64 0))
	%39 = load i32, i32* %24		;load value of a8
	call void @putint(i32 %39)
	call void @putstr(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.17, i64 0, i64 0))
	call void @putstr(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.18, i64 0, i64 0))
	%40 = load i32, i32* %25		;load value of a9
	call void @putint(i32 %40)
	call void @putstr(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.19, i64 0, i64 0))
	call void @putstr(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.20, i64 0, i64 0))
	%41 = load i32, i32* %26		;load value of a10
	call void @putint(i32 %41)
	call void @putstr(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.21, i64 0, i64 0))
	call void @putstr(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.22, i64 0, i64 0))
	%42 = load i32, i32* %27		;load value of a11
	call void @putint(i32 %42)
	call void @putstr(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.23, i64 0, i64 0))
	call void @putstr(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.24, i64 0, i64 0))
	%43 = load i32, i32* %28		;load value of a12
	call void @putint(i32 %43)
	call void @putstr(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.25, i64 0, i64 0))
	call void @putstr(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.26, i64 0, i64 0))
	%44 = load i32, i32* %29		;load value of a13
	call void @putint(i32 %44)
	call void @putstr(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.27, i64 0, i64 0))
	call void @putstr(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.28, i64 0, i64 0))
	%45 = load i32, i32* %30		;load value of a14
	call void @putint(i32 %45)
	call void @putstr(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.29, i64 0, i64 0))
	%46 = load i32, i32* %16		;load value of a0
	%47 = load i32, i32* %17		;load value of a1
	%48 = add i32 %46, %47
	%49 = load i32, i32* %18		;load value of a2
	%50 = add i32 %48, %49
	%51 = load i32, i32* %19		;load value of a3
	%52 = add i32 %50, %51
	%53 = load i32, i32* %20		;load value of a4
	%54 = add i32 %52, %53
	%55 = load i32, i32* %21		;load value of a5
	%56 = add i32 %54, %55
	%57 = load i32, i32* %22		;load value of a6
	%58 = add i32 %56, %57
	%59 = load i32, i32* %23		;load value of a7
	%60 = add i32 %58, %59
	%61 = load i32, i32* %24		;load value of a8
	%62 = add i32 %60, %61
	%63 = load i32, i32* %25		;load value of a9
	%64 = add i32 %62, %63
	%65 = load i32, i32* %26		;load value of a10
	%66 = add i32 %64, %65
	%67 = load i32, i32* %27		;load value of a11
	%68 = add i32 %66, %67
	%69 = load i32, i32* %28		;load value of a12
	%70 = add i32 %68, %69
	%71 = load i32, i32* %29		;load value of a13
	%72 = add i32 %70, %71
	%73 = load i32, i32* %30		;load value of a14
	%74 = add i32 %72, %73
	ret i32 %74
}

@.str.30 = private unnamed_addr constant [8 x i8] c"result=\00", align 1
@.str.31 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1

define dso_local i32 @main() {
0:								 ; preds =
	%1 = alloca i32				;decl var: a0
	store i32 0, i32* %1			;init var: a0
	%2 = alloca i32				;decl var: a1
	store i32 1, i32* %2			;init var: a1
	%3 = alloca i32				;decl var: a2
	store i32 2, i32* %3			;init var: a2
	%4 = alloca i32				;decl var: a3
	store i32 3, i32* %4			;init var: a3
	%5 = alloca i32				;decl var: a4
	store i32 4, i32* %5			;init var: a4
	%6 = alloca i32				;decl var: a5
	store i32 5, i32* %6			;init var: a5
	%7 = alloca i32				;decl var: a6
	store i32 6, i32* %7			;init var: a6
	%8 = alloca i32				;decl var: a7
	store i32 7, i32* %8			;init var: a7
	%9 = alloca i32				;decl var: a8
	store i32 8, i32* %9			;init var: a8
	%10 = alloca i32				;decl var: a9
	store i32 9, i32* %10			;init var: a9
	%11 = alloca i32				;decl var: a10
	store i32 10, i32* %11			;init var: a10
	%12 = alloca i32				;decl var: a11
	store i32 11, i32* %12			;init var: a11
	%13 = alloca i32				;decl var: a12
	store i32 12, i32* %13			;init var: a12
	%14 = alloca i32				;decl var: a13
	store i32 13, i32* %14			;init var: a13
	%15 = alloca i32				;decl var: a14
	store i32 14, i32* %15			;init var: a14
	%16 = alloca i32				;decl var: result
	%17 = load i32, i32* %1		;load value of a0
	%18 = load i32, i32* %2		;load value of a1
	%19 = load i32, i32* %3		;load value of a2
	%20 = load i32, i32* %4		;load value of a3
	%21 = load i32, i32* %5		;load value of a4
	%22 = load i32, i32* %6		;load value of a5
	%23 = load i32, i32* %7		;load value of a6
	%24 = load i32, i32* %8		;load value of a7
	%25 = load i32, i32* %9		;load value of a8
	%26 = load i32, i32* %10		;load value of a9
	%27 = load i32, i32* %11		;load value of a10
	%28 = load i32, i32* %12		;load value of a11
	%29 = load i32, i32* %13		;load value of a12
	%30 = load i32, i32* %14		;load value of a13
	%31 = load i32, i32* %15		;load value of a14
	%32 = call i32 @sum(i32 %17, i32 %18, i32 %19, i32 %20, i32 %21, i32 %22, i32 %23, i32 %24, i32 %25, i32 %26, i32 %27, i32 %28, i32 %29, i32 %30, i32 %31)
	store i32 %32, i32* %16			;init var: result
	call void @putstr(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.30, i64 0, i64 0))
	%33 = load i32, i32* %16		;load value of result
	call void @putint(i32 %33)
	call void @putstr(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.31, i64 0, i64 0))
	ret i32 0
}

