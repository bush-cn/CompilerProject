declare i32 @getint()
declare i32 @getchar()
declare void @putint(i32)
declare void @putch(i32)
declare void @putstr(i8*)

@N = dso_local constant i32 10
@a = dso_local global [10 x i32] [i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9]

define dso_local i32 @fib(i32 %0) {
1:								 ; preds =
	%2 = alloca i32				;alloc addr for fParam i
	store i32 %0, i32* %2			;store fParam slot
	%3 = load i32, i32* %2		;load value of i
	%4 = icmp eq i32 %3, 1
	br i1 %4, label %5, label %7		;single LAndExp
5:								 ; preds = 1
	ret i32 1
6:								 ; preds =
	br label %7
7:								 ; preds = 1 6
	%8 = load i32, i32* %2		;load value of i
	%9 = icmp eq i32 %8, 2
	br i1 %9, label %10, label %12		;single LAndExp
10:								 ; preds = 7
	ret i32 2
11:								 ; preds =
	br label %12
12:								 ; preds = 7 11
	%13 = load i32, i32* %2		;load value of i
	%14 = sub i32 %13, 1
	%15 = call i32 @fib(i32 %14)
	%16 = load i32, i32* %2		;load value of i
	%17 = sub i32 %16, 2
	%18 = call i32 @fib(i32 %17)
	%19 = add i32 %15, %18
	ret i32 %19
}

@.str.0 = private unnamed_addr constant [3 x i8] c", \00", align 1
@.str.1 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@.str.2 = private unnamed_addr constant [3 x i8] c", \00", align 1
@.str.3 = private unnamed_addr constant [3 x i8] c", \00", align 1
@.str.4 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1

define dso_local i32 @main() {
0:								 ; preds =
	%1 = alloca i32				;decl var: i
	store i32 2, i32* %1			;init var: i
	%2 = alloca i32				;decl var: j
	store i32 5, i32* %2			;init var: j
	%3 = alloca i32				;decl const: a1
	store i32 1, i32* %3			;init const: a1
	%4 = alloca i32				;decl const: a2
	store i32 2, i32* %4			;init const: a2
	%5 = call i32 @getint()
	store i32 %5, i32* %1
	%6 = call i32 @getint()
	store i32 %6, i32* %2
	%7 = load i32, i32* %1		;load value of i
	%8 = load i32, i32* %2		;load value of j
	%9 = mul i32 %7, %8
	%10 = sub i32 0, %9
	%11 = call i32 @fib(i32 4)
	%12 = mul i32 %10, %11
	%13 = add i32 %12, 0
	%14 = getelementptr [10 x i32], [10 x i32]* @a, i32 0, i32 1		;get &a[1]
	%15 = load i32, i32* %14		;load value of a[1]
	%16 = mul i32 %15, 1
	%17 = add i32 %13, %16
	%18 = sub i32 %17, 0
	%19 = sdiv i32 %18, 5
	store i32 %19, i32* %1
	%20 = call i32 @fib(i32 5)
	%21 = add i32 %20, 2
	%22 = call i32 @fib(i32 %21)
	%23 = sub i32 1197, %22
	%24 = add i32 %23, -10091
	store i32 %24, i32* %2
	%25 = alloca i32				;decl var: k
	store i32 -6, i32* %25			;init var: k
	%26 = getelementptr [10 x i32], [10 x i32]* @a, i32 0, i32 0		;get &a[0]
	%27 = load i32, i32* %26		;load value of a[0]
	%28 = load i32, i32* %1		;load value of i
	%29 = load i32, i32* %1		;load value of i
	%30 = mul i32 %28, %29
	%31 = add i32 %27, %30
	%32 = getelementptr [10 x i32], [10 x i32]* @a, i32 0, i32 0		;get &a[0]
	store i32 %31, i32* %32
	%33 = getelementptr [10 x i32], [10 x i32]* @a, i32 0, i32 1		;get &a[1]
	%34 = load i32, i32* %33		;load value of a[1]
	%35 = load i32, i32* %1		;load value of i
	%36 = load i32, i32* %1		;load value of i
	%37 = mul i32 %35, %36
	%38 = add i32 %34, %37
	%39 = getelementptr [10 x i32], [10 x i32]* @a, i32 0, i32 1		;get &a[1]
	store i32 %38, i32* %39
	%40 = getelementptr [10 x i32], [10 x i32]* @a, i32 0, i32 2		;get &a[2]
	%41 = load i32, i32* %40		;load value of a[2]
	%42 = load i32, i32* %1		;load value of i
	%43 = load i32, i32* %1		;load value of i
	%44 = mul i32 %42, %43
	%45 = add i32 %41, %44
	%46 = getelementptr [10 x i32], [10 x i32]* @a, i32 0, i32 2		;get &a[2]
	store i32 %45, i32* %46
	%47 = getelementptr [10 x i32], [10 x i32]* @a, i32 0, i32 3		;get &a[3]
	%48 = load i32, i32* %47		;load value of a[3]
	%49 = load i32, i32* %1		;load value of i
	%50 = load i32, i32* %1		;load value of i
	%51 = mul i32 %49, %50
	%52 = add i32 %48, %51
	%53 = getelementptr [10 x i32], [10 x i32]* @a, i32 0, i32 3		;get &a[3]
	store i32 %52, i32* %53
	%54 = getelementptr [10 x i32], [10 x i32]* @a, i32 0, i32 4		;get &a[4]
	%55 = load i32, i32* %54		;load value of a[4]
	%56 = load i32, i32* %1		;load value of i
	%57 = load i32, i32* %1		;load value of i
	%58 = mul i32 %56, %57
	%59 = add i32 %55, %58
	%60 = getelementptr [10 x i32], [10 x i32]* @a, i32 0, i32 4		;get &a[4]
	store i32 %59, i32* %60
	%61 = getelementptr [10 x i32], [10 x i32]* @a, i32 0, i32 5		;get &a[5]
	%62 = load i32, i32* %61		;load value of a[5]
	%63 = load i32, i32* %1		;load value of i
	%64 = load i32, i32* %1		;load value of i
	%65 = mul i32 %63, %64
	%66 = add i32 %62, %65
	%67 = getelementptr [10 x i32], [10 x i32]* @a, i32 0, i32 5		;get &a[5]
	store i32 %66, i32* %67
	%68 = getelementptr [10 x i32], [10 x i32]* @a, i32 0, i32 6		;get &a[6]
	%69 = load i32, i32* %68		;load value of a[6]
	%70 = load i32, i32* %1		;load value of i
	%71 = load i32, i32* %1		;load value of i
	%72 = mul i32 %70, %71
	%73 = add i32 %69, %72
	%74 = getelementptr [10 x i32], [10 x i32]* @a, i32 0, i32 6		;get &a[6]
	store i32 %73, i32* %74
	%75 = getelementptr [10 x i32], [10 x i32]* @a, i32 0, i32 7		;get &a[7]
	%76 = load i32, i32* %75		;load value of a[7]
	%77 = load i32, i32* %1		;load value of i
	%78 = load i32, i32* %1		;load value of i
	%79 = mul i32 %77, %78
	%80 = add i32 %76, %79
	%81 = getelementptr [10 x i32], [10 x i32]* @a, i32 0, i32 7		;get &a[7]
	store i32 %80, i32* %81
	%82 = getelementptr [10 x i32], [10 x i32]* @a, i32 0, i32 8		;get &a[8]
	%83 = load i32, i32* %82		;load value of a[8]
	%84 = load i32, i32* %1		;load value of i
	%85 = load i32, i32* %1		;load value of i
	%86 = mul i32 %84, %85
	%87 = add i32 %83, %86
	%88 = getelementptr [10 x i32], [10 x i32]* @a, i32 0, i32 8		;get &a[8]
	store i32 %87, i32* %88
	%89 = getelementptr [10 x i32], [10 x i32]* @a, i32 0, i32 9		;get &a[9]
	%90 = load i32, i32* %89		;load value of a[9]
	%91 = load i32, i32* %1		;load value of i
	%92 = load i32, i32* %1		;load value of i
	%93 = mul i32 %91, %92
	%94 = add i32 %90, %93
	%95 = getelementptr [10 x i32], [10 x i32]* @a, i32 0, i32 9		;get &a[9]
	store i32 %94, i32* %95
	store i32 0, i32* %1
	br label %96
96:								 ; preds = 107 0
	%97 = load i32, i32* %1		;load value of i
	%98 = icmp slt i32 %97, 10
	%99 = zext i1 %98 to i32
	%100 = icmp ne i32 %99, 0		;single RelExp, that is != 0
	br i1 %100, label %101, label %107		;single LAndExp
101:								 ; preds = 96
	%102 = load i32, i32* %1		;load value of i
	%103 = getelementptr [10 x i32], [10 x i32]* @a, i32 0, i32 %102		;get &a[%102]
	%104 = load i32, i32* %103		;load value of a[%102]
	call void @putint(i32 %104)
	call void @putstr(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.0, i64 0, i64 0))
	%105 = load i32, i32* %1		;load value of i
	%106 = add i32 %105, 1
	store i32 %106, i32* %1
	br label %96
107:								 ; preds = 96
	call void @putstr(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0))
	%108 = load i32, i32* %1		;load value of i
	call void @putint(i32 %108)
	call void @putstr(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.2, i64 0, i64 0))
	%109 = load i32, i32* %2		;load value of j
	call void @putint(i32 %109)
	call void @putstr(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.3, i64 0, i64 0))
	%110 = load i32, i32* %25		;load value of k
	call void @putint(i32 %110)
	call void @putstr(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.4, i64 0, i64 0))
	ret i32 0
}

