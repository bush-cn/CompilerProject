declare i32 @getint()
declare i32 @getchar()
declare void @putint(i32)
declare void @putch(i32)
declare void @putstr(i8*)

@.str.0 = private unnamed_addr constant [10 x i8] c"test1 OK\0A\00", align 1
@.str.1 = private unnamed_addr constant [10 x i8] c"test2 OK\0A\00", align 1
@.str.2 = private unnamed_addr constant [10 x i8] c"test3 OK\0A\00", align 1

define dso_local i32 @main() {
0:
	%1 = alloca i32
	store i32 0, i32* %1
	%2 = alloca i32
	store i32 1, i32* %2
	%3 = alloca i32
	store i32 2, i32* %3
	%4 = alloca i32
	store i32 3, i32* %4
	%5 = icmp ne i32 1, 0
	br i1 %5, label %6, label %8
6:
	br i1 1, label %7, label %8
7:
	call void @putstr(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.0, i64 0, i64 0))
	br label %8
8:
	%9 = load i32, i32* %3
	%10 = load i32, i32* %4
	%11 = icmp eq i32 %9, %10
	%12 = zext i1 %11 to i32
	%13 = load i32, i32* %1
	%14 = icmp eq i32 %12, %13
	br i1 %14, label %15, label %16
15:
	call void @putstr(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.1, i64 0, i64 0))
	br label %16
16:
	%17 = load i32, i32* %3
	%18 = load i32, i32* %3
	%19 = icmp ne i32 %17, %18
	%20 = zext i1 %19 to i32
	%21 = load i32, i32* %1
	%22 = icmp sgt i32 %20, %21
	%23 = zext i1 %22 to i32
	%24 = load i32, i32* %4
	%25 = icmp sle i32 %23, %24
	br i1 %25, label %26, label %27
26:
	call void @putstr(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.2, i64 0, i64 0))
	br label %27
27:
	ret i32 0
}

